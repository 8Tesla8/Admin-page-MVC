@model Uspa.Domain.LocalDb.Contents

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Contents</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="form-group">
            @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.introtext, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.introtext, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.introtext, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fulltext, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fulltext, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fulltext, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.CheckBoxFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
            @Html.LabelFor(model => model.state, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @*@Html.CheckBoxFor(model => model.state, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.state, "", new { @class = "text-danger" })*@
                </div>
            </div>
        </div>

        @Html.HiddenFor(model => model.created)
        @*<div class="form-group">
            @Html.LabelFor(model => model.created, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.created, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.created, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @Html.HiddenFor(model => model.modified)
        @*<div class="form-group">
            @Html.LabelFor(model => model.modified, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.modified, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.modified, "", new { @class = "text-danger" })
            </div>
        </div>*@


        <div class="form-group">
            @Html.LabelFor(model => model.published, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.published, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.published, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.checkIn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.checkIn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.checkIn, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.checkOut, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.checkOut, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.checkOut, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.site_id, "site_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("site_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.site_id, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.createdByUser_id)
        @*<div class="form-group">
            @Html.LabelFor(model => model.createdByUser_id, "createdByUser_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("createdByUser_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.createdByUser_id, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @Html.HiddenFor(model => model.modifiedByUser_id)
        @*<div class="form-group">
            @Html.LabelFor(model => model.modifiedByUser_id, "modifiedByUser_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("modifiedByUser_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.modifiedByUser_id, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.category_id, "category_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("category_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @*//script for ckEditor*@
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="@Url.Content("~/Content/ckfinder/ckfinder.js")"></script>
    <script src="@Url.Content("~/Content/ckeditor/ckeditor.js")"></script>
    <script type="text/javascript">
            CKEDITOR.replace('introtext', {
                  filebrowserBrowseUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")',
                        filebrowserImageBrowseUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")',
                        filebrowserFlashBrowseUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")',
                        filebrowserUploadUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")',
                        filebrowserImageUploadUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")',
                        filebrowserFlashUploadUrl: '@Url.Content("~/Content/ckfinder/ckfinder.html")'

                    });

                    /*  =====INSTANCE====== */

                    CKFinder.SetupCKEditor(null, '@Url.Content("~/Content/ckfinder/")');
    </script>
    @*//script for ckEditor*@

    @Scripts.Render("~/bundles/jqueryval")
}
